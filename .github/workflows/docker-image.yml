name: CI/CD using github actions & docker

# event trigger
on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # JDK setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 yml 파일 생성 - application.yml
      - name: make application.yml
        if: |
          contains(github.ref, 'main')
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.YML }}" > ./application.yml
        shell: bash

      # 환경별 yml 파일 생성 - dev
      - name: make application-dev.yml
        if: contains(github.ref, 'main')
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
        shell: bash

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x checkstyleMain -x checkstyleTest -x editorconfigCheck -x test

      # docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/docker-olol-prod .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-olol-prod

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            
            sudo docker stop $(sudo docker ps -q --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/docker-olol-prod" --filter "expose=8080")
            sudo docker rm $(sudo docker ps -a -q --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/docker-olol-prod" --filter "expose=8080")

            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-olol-prod
            sudo docker run -d -p 8080:8080 --name olol-prod --restart always ${{ secrets.DOCKER_USERNAME }}/docker-olol-prod

            sudo docker image prune -f
